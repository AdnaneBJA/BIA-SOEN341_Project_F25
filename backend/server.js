var express = require("express");
var app = express();
var { Client } = require("pg");
var cors = require("cors");
const PORT = 3000;

app.use(express.json());
app.use(
    cors({
        origin: (origin, callback) => callback(null, true),
        methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
        credentials: true,
        allowedHeaders: "Content-Type,Authorization",
    })
);


const client = new Client({
    host: "localhost",
    user: "postgres",
    port: 5432,
    password: "123",
});

client.connect(err => {
    if (err) {
        console.log("Error when connecting to database: ", err);
    }
    console.log("Succesfully connected to PostgreSQL database");
    createTables();
})


// SQL schema: create tables if they don't exist
const createTables = async () => {
    const query = `
  CREATE TABLE IF NOT EXISTS "Organizer" (
    "organizerID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "organizerUserName" VARCHAR(255) UNIQUE NOT NULL,
    "organizerPassword" VARCHAR(255) NOT NULL
  );

  CREATE TABLE IF NOT EXISTS "Student" (
    "studentID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "studentUserName" VARCHAR(255) UNIQUE NOT NULL,
    "studentPassword" VARCHAR(255) NOT NULL
  );

  CREATE TABLE IF NOT EXISTS "Admin" (
    "adminID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "adminUserName" VARCHAR(255) UNIQUE NOT NULL,
    "adminPassword" VARCHAR(255) NOT NULL
  );

  CREATE TABLE IF NOT EXISTS "Events" (
    "eventID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "eventName" VARCHAR(255) NOT NULL,
    "organizerID" INTEGER NOT NULL,
    "eventType" VARCHAR(100),
    "startTime" TIMESTAMP NOT NULL,
    "endTime" TIMESTAMP NOT NULL,
    "location" VARCHAR(255),
    "maxParticipants" INTEGER NOT NULL,
    "currentParticipants" INTEGER DEFAULT 0,
    "eventPrices" INTEGER NOT NULL,
    CONSTRAINT fk_events_organizer
      FOREIGN KEY ("organizerID") 
      REFERENCES "Organizer" ("organizerID")
  );

  CREATE TABLE IF NOT EXISTS "Booking" (
    "bookingID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "eventID" INTEGER NOT NULL,
    "studentID" INTEGER NOT NULL,
    "bookingTime" TIMESTAMP NOT NULL,
    "paymentStatus" VARCHAR(50),
    CONSTRAINT fk_booking_event
      FOREIGN KEY ("eventID") 
      REFERENCES "Events" ("eventID"),
    CONSTRAINT fk_booking_student
      FOREIGN KEY ("studentID") 
      REFERENCES "Student" ("studentID")
  );
  `;

    try {
        await client.query(query);
        console.log("All tables created (updated if they already exist) ");
    } catch (err) {
        console.error("Error creating tables:", err);
    }
};


app.listen(PORT, (err) => {
    if (err) {
        console.log("Error in server setup: ", err);
    }
    console.log("Succesfully connected to port: ", PORT);
})